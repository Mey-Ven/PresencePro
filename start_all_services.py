#!/usr/bin/env python3
"""
Script pour d√©marrer tous les services PresencePro
"""
import subprocess
import time
import sys
import os
import signal
from pathlib import Path


class ServiceManager:
    """Gestionnaire des services PresencePro"""
    
    def __init__(self):
        self.services = [
            {
                "name": "auth-service",
                "port": 8001,
                "path": "auth-service",
                "process": None
            },
            {
                "name": "user-service",
                "port": 8002,
                "path": "user-service",
                "process": None
            },
            {
                "name": "course-service",
                "port": 8003,
                "path": "course-service",
                "process": None
            },
            {
                "name": "face-recognition-service",
                "port": 8004,
                "path": "face-recognition-service",
                "process": None
            },
            {
                "name": "attendance-service",
                "port": 8005,
                "path": "attendance-service",
                "process": None
            }
        ]
        self.running = False
    
    def check_dependencies(self):
        """V√©rifier les d√©pendances"""
        print("üîç V√©rification des d√©pendances...")
        
        for service in self.services:
            service_path = Path(service["path"])
            if not service_path.exists():
                print(f"‚ùå Service {service['name']} non trouv√© dans {service_path}")
                return False
            
            requirements_file = service_path / "requirements.txt"
            if not requirements_file.exists():
                print(f"‚ùå Fichier requirements.txt manquant pour {service['name']}")
                return False
            
            main_file = service_path / "app" / "main.py"
            if not main_file.exists():
                print(f"‚ùå Fichier main.py manquant pour {service['name']}")
                return False
        
        print("‚úÖ Toutes les d√©pendances sont pr√©sentes")
        return True
    
    def install_dependencies(self):
        """Installer les d√©pendances pour tous les services"""
        print("üì¶ Installation des d√©pendances...")
        
        for service in self.services:
            print(f"\nüì¶ Installation pour {service['name']}...")
            try:
                result = subprocess.run(
                    ["pip", "install", "-r", "requirements.txt"],
                    cwd=service["path"],
                    capture_output=True,
                    text=True
                )
                if result.returncode == 0:
                    print(f"‚úÖ D√©pendances install√©es pour {service['name']}")
                else:
                    print(f"‚ùå Erreur installation {service['name']}: {result.stderr}")
                    return False
            except Exception as e:
                print(f"‚ùå Erreur lors de l'installation pour {service['name']}: {e}")
                return False
        
        return True
    
    def initialize_databases(self):
        """Initialiser les bases de donn√©es"""
        print("\nüóÑÔ∏è Initialisation des bases de donn√©es...")
        
        for service in self.services:
            init_script = Path(service["path"]) / "init_db.py"
            if init_script.exists():
                print(f"\nüóÑÔ∏è Initialisation de la base pour {service['name']}...")
                try:
                    result = subprocess.run(
                        ["python", "init_db.py"],
                        cwd=service["path"],
                        capture_output=True,
                        text=True
                    )
                    if result.returncode == 0:
                        print(f"‚úÖ Base de donn√©es initialis√©e pour {service['name']}")
                    else:
                        print(f"‚ö†Ô∏è  Avertissement pour {service['name']}: {result.stderr}")
                except Exception as e:
                    print(f"‚ùå Erreur initialisation DB pour {service['name']}: {e}")
    
    def start_service(self, service):
        """D√©marrer un service"""
        print(f"üöÄ D√©marrage de {service['name']} sur le port {service['port']}...")
        
        try:
            process = subprocess.Popen(
                ["uvicorn", "app.main:app", "--reload", "--port", str(service["port"])],
                cwd=service["path"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            service["process"] = process
            return True
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage {service['name']}: {e}")
            return False
    
    def stop_service(self, service):
        """Arr√™ter un service"""
        if service["process"]:
            print(f"üõë Arr√™t de {service['name']}...")
            service["process"].terminate()
            try:
                service["process"].wait(timeout=5)
            except subprocess.TimeoutExpired:
                service["process"].kill()
            service["process"] = None
    
    def start_all(self):
        """D√©marrer tous les services"""
        print("üöÄ D√©marrage de tous les services PresencePro")
        print("=" * 60)
        
        if not self.check_dependencies():
            return False
        
        # Installer les d√©pendances
        if not self.install_dependencies():
            return False
        
        # Initialiser les bases de donn√©es
        self.initialize_databases()
        
        # D√©marrer les services
        print("\nüöÄ D√©marrage des services...")
        for service in self.services:
            if not self.start_service(service):
                self.stop_all()
                return False
            time.sleep(2)  # Attendre entre les d√©marrages
        
        self.running = True
        print("\nüéâ Tous les services sont d√©marr√©s !")
        print("\nüìã Services disponibles:")
        for service in self.services:
            print(f"   ‚Ä¢ {service['name']}: http://localhost:{service['port']}/docs")
        
        return True
    
    def stop_all(self):
        """Arr√™ter tous les services"""
        print("\nüõë Arr√™t de tous les services...")
        for service in self.services:
            self.stop_service(service)
        self.running = False
        print("‚úÖ Tous les services sont arr√™t√©s")
    
    def status(self):
        """Afficher le statut des services"""
        print("\nüìä Statut des services:")
        for service in self.services:
            if service["process"] and service["process"].poll() is None:
                print(f"   ‚Ä¢ {service['name']}: ‚úÖ En cours (PID: {service['process'].pid})")
            else:
                print(f"   ‚Ä¢ {service['name']}: ‚ùå Arr√™t√©")
    
    def wait_for_interrupt(self):
        """Attendre l'interruption utilisateur"""
        try:
            print("\n‚å®Ô∏è  Appuyez sur Ctrl+C pour arr√™ter tous les services...")
            while self.running:
                time.sleep(1)
                # V√©rifier si les processus sont toujours en vie
                for service in self.services:
                    if service["process"] and service["process"].poll() is not None:
                        print(f"‚ö†Ô∏è  {service['name']} s'est arr√™t√© de mani√®re inattendue")
                        self.running = False
                        break
        except KeyboardInterrupt:
            print("\n\nüõë Interruption d√©tect√©e...")
            self.stop_all()


def signal_handler(sig, frame):
    """Gestionnaire de signal pour arr√™t propre"""
    print("\nüõë Signal d'arr√™t re√ßu...")
    sys.exit(0)


def main():
    """Fonction principale"""
    # Configurer le gestionnaire de signal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    manager = ServiceManager()
    
    print("üéØ PresencePro Service Manager")
    print("=" * 40)
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "start":
            if manager.start_all():
                manager.wait_for_interrupt()
        elif command == "stop":
            manager.stop_all()
        elif command == "status":
            manager.status()
        elif command == "install":
            manager.install_dependencies()
        elif command == "init-db":
            manager.initialize_databases()
        else:
            print("Commandes disponibles:")
            print("  start    - D√©marrer tous les services")
            print("  stop     - Arr√™ter tous les services")
            print("  status   - Afficher le statut")
            print("  install  - Installer les d√©pendances")
            print("  init-db  - Initialiser les bases de donn√©es")
    else:
        # Mode interactif par d√©faut
        if manager.start_all():
            manager.wait_for_interrupt()


if __name__ == "__main__":
    main()
