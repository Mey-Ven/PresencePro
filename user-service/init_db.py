"""
Script d'initialisation de la base de donn√©es pour le service utilisateur
"""
import asyncio
from sqlalchemy.orm import Session
from app.core.database import engine, Base, SessionLocal
from app.models.user import Student, Teacher, Parent, ParentStudentRelation
from app.schemas.user import StudentCreate, TeacherCreate, ParentCreate, ParentStudentRelationCreate
from app.services.student_service import StudentService
from app.services.teacher_service import TeacherService
from app.services.parent_service import ParentService
from app.core.config import settings


def init_database():
    """Initialise la base de donn√©es avec des donn√©es d'exemple"""
    print("üöÄ Initialisation du service utilisateur PresencePro")
    print("=" * 60)
    print(f"üìä Base de donn√©es: {settings.database_url}")
    print()
    
    try:
        # Cr√©er les tables
        print("üîß Cr√©ation des tables...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s")
        
        # Cr√©er une session
        db = SessionLocal()
        
        try:
            # Cr√©er des utilisateurs d'exemple
            print("üë• Cr√©ation d'utilisateurs d'exemple...")
            
            # Services
            student_service = StudentService(db)
            teacher_service = TeacherService(db)
            parent_service = ParentService(db)
            
            # Cr√©er des enseignants
            teachers_data = [
                {
                    "user_id": "teacher1",
                    "employee_number": "EMP001",
                    "first_name": "Marie",
                    "last_name": "Dupont",
                    "email": "marie.dupont@presencepro.com",
                    "phone": "0123456789",
                    "department": "Math√©matiques",
                    "subject": "Alg√®bre",
                    "is_active": True
                },
                {
                    "user_id": "teacher2",
                    "employee_number": "EMP002",
                    "first_name": "Pierre",
                    "last_name": "Martin",
                    "email": "pierre.martin@presencepro.com",
                    "phone": "0123456790",
                    "department": "Sciences",
                    "subject": "Physique",
                    "is_active": True
                }
            ]
            
            for teacher_data in teachers_data:
                if not teacher_service.get_teacher_by_user_id(teacher_data["user_id"]):
                    teacher_create = TeacherCreate(**teacher_data)
                    teacher_service.create_teacher(teacher_create)
                    print(f"‚úÖ Enseignant cr√©√©: {teacher_data['first_name']} {teacher_data['last_name']}")
                else:
                    print(f"‚ö†Ô∏è  L'enseignant {teacher_data['user_id']} existe d√©j√†")
            
            # Cr√©er des √©tudiants
            students_data = [
                {
                    "user_id": "student1",
                    "student_number": "STU001",
                    "first_name": "Alice",
                    "last_name": "Johnson",
                    "email": "alice.johnson@student.presencepro.com",
                    "phone": "0123456791",
                    "class_name": "6√®me A",
                    "academic_year": "2023-2024",
                    "is_active": True
                },
                {
                    "user_id": "student2",
                    "student_number": "STU002",
                    "first_name": "Bob",
                    "last_name": "Smith",
                    "email": "bob.smith@student.presencepro.com",
                    "phone": "0123456792",
                    "class_name": "6√®me A",
                    "academic_year": "2023-2024",
                    "is_active": True
                },
                {
                    "user_id": "student3",
                    "student_number": "STU003",
                    "first_name": "Charlie",
                    "last_name": "Brown",
                    "email": "charlie.brown@student.presencepro.com",
                    "phone": "0123456793",
                    "class_name": "5√®me B",
                    "academic_year": "2023-2024",
                    "is_active": True
                }
            ]
            
            for student_data in students_data:
                if not student_service.get_student_by_user_id(student_data["user_id"]):
                    student_create = StudentCreate(**student_data)
                    student_service.create_student(student_create)
                    print(f"‚úÖ √âtudiant cr√©√©: {student_data['first_name']} {student_data['last_name']}")
                else:
                    print(f"‚ö†Ô∏è  L'√©tudiant {student_data['user_id']} existe d√©j√†")
            
            # Cr√©er des parents
            parents_data = [
                {
                    "user_id": "parent1",
                    "first_name": "Robert",
                    "last_name": "Johnson",
                    "email": "robert.johnson@parent.presencepro.com",
                    "phone": "0123456794",
                    "profession": "Ing√©nieur",
                    "emergency_contact": True,
                    "is_active": True
                },
                {
                    "user_id": "parent2",
                    "first_name": "Sarah",
                    "last_name": "Johnson",
                    "email": "sarah.johnson@parent.presencepro.com",
                    "phone": "0123456795",
                    "profession": "M√©decin",
                    "emergency_contact": False,
                    "is_active": True
                },
                {
                    "user_id": "parent3",
                    "first_name": "Michael",
                    "last_name": "Smith",
                    "email": "michael.smith@parent.presencepro.com",
                    "phone": "0123456796",
                    "profession": "Professeur",
                    "emergency_contact": True,
                    "is_active": True
                }
            ]
            
            for parent_data in parents_data:
                if not parent_service.get_parent_by_user_id(parent_data["user_id"]):
                    parent_create = ParentCreate(**parent_data)
                    parent_service.create_parent(parent_create)
                    print(f"‚úÖ Parent cr√©√©: {parent_data['first_name']} {parent_data['last_name']}")
                else:
                    print(f"‚ö†Ô∏è  Le parent {parent_data['user_id']} existe d√©j√†")
            
            # Cr√©er des relations parent-√©l√®ve
            print("üîó Cr√©ation des relations parent-√©l√®ve...")
            
            # R√©cup√©rer les IDs
            alice = student_service.get_student_by_user_id("student1")
            bob = student_service.get_student_by_user_id("student2")
            robert = parent_service.get_parent_by_user_id("parent1")
            sarah = parent_service.get_parent_by_user_id("parent2")
            michael = parent_service.get_parent_by_user_id("parent3")
            
            relations = [
                # Alice Johnson - parents Robert et Sarah Johnson
                {"parent_id": robert.id, "student_id": alice.id, "relationship_type": "p√®re", "is_primary_contact": True},
                {"parent_id": sarah.id, "student_id": alice.id, "relationship_type": "m√®re", "is_emergency_contact": True},
                # Bob Smith - parent Michael Smith
                {"parent_id": michael.id, "student_id": bob.id, "relationship_type": "p√®re", "is_primary_contact": True, "is_emergency_contact": True}
            ]
            
            for relation_data in relations:
                if not parent_service.relation_exists(relation_data["parent_id"], relation_data["student_id"]):
                    relation_create = ParentStudentRelationCreate(**relation_data)
                    parent_service.create_parent_student_relation(relation_create)
                    print(f"‚úÖ Relation cr√©√©e: Parent {relation_data['parent_id']} - √âl√®ve {relation_data['student_id']}")
                else:
                    print(f"‚ö†Ô∏è  La relation Parent {relation_data['parent_id']} - √âl√®ve {relation_data['student_id']} existe d√©j√†")
            
            print()
            print("üéâ Initialisation termin√©e avec succ√®s!")
            print()
            print("üìù Prochaines √©tapes:")
            print("   1. Lancez le service: uvicorn app.main:app --reload --port 8002")
            print("   2. Testez l'API: http://localhost:8002/docs")
            print("   3. Utilisez les tokens du service d'authentification")
            
        finally:
            db.close()
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False
    
    return True


if __name__ == "__main__":
    init_database()
