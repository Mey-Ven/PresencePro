"""
Application principale du service de notifications PresencePro
"""
import logging
import sys
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from datetime import datetime, timezone

from app.core.config import settings
from app.core.database import init_database, check_database_connection, get_database_stats
from app.services.event_listener import event_listener
from app.services.template_service import template_service

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(settings.log_file) if settings.log_file else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage du Notification Service...")
    
    try:
        # Initialiser la base de donn√©es
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e")
        
        # Initialiser les templates par d√©faut
        await template_service.initialize_default_templates()
        logger.info("‚úÖ Templates par d√©faut initialis√©s")
        
        # D√©marrer l'√©coute des √©v√©nements en arri√®re-plan
        asyncio.create_task(start_event_listener())
        logger.info("‚úÖ √âcoute d'√©v√©nements d√©marr√©e")
        
        logger.info("‚úÖ Notification Service d√©marr√© avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage service: {e}")
        raise
    
    yield
    
    # Arr√™t
    logger.info("üõë Arr√™t du Notification Service...")
    
    try:
        # Arr√™ter l'√©coute des √©v√©nements
        await event_listener.stop_listening()
        await event_listener.disconnect()
        logger.info("‚úÖ √âcoute d'√©v√©nements arr√™t√©e")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur arr√™t service: {e}")


async def start_event_listener():
    """D√©marrer l'√©coute des √©v√©nements en arri√®re-plan"""
    try:
        await event_listener.start_listening()
    except Exception as e:
        logger.error(f"‚ùå Erreur √©coute √©v√©nements: {e}")


# Cr√©er l'application FastAPI
app = FastAPI(
    title="PresencePro Notification Service",
    description="""
    üé≠ **Service de notifications asynchrones pour PresencePro**
    
    Ce microservice g√®re l'envoi de notifications par email, SMS et push pour tous les √©v√©nements de l'√©cosyst√®me PresencePro.
    
    ## üöÄ **Fonctionnalit√©s principales**
    
    ### üìß **Notifications par email**
    - Envoi via SMTP ou SendGrid
    - Templates personnalisables avec Jinja2
    - Support HTML avec CSS inline
    - Gestion des pi√®ces jointes
    - Retry automatique en cas d'√©chec
    
    ### üì± **Notifications SMS et Push**
    - SMS via Twilio
    - Push notifications via Firebase
    - Gestion des tokens d'appareils
    - Notifications en lot
    
    ### ‚ö° **Traitement asynchrone**
    - T√¢ches Celery avec Redis
    - Queues s√©par√©es par type de notification
    - Retry intelligent avec backoff exponentiel
    - Monitoring des t√¢ches en temps r√©el
    
    ### üéØ **√âv√©nements support√©s**
    - Absence d√©tect√©e
    - Justification soumise/approuv√©e/rejet√©e
    - Message re√ßu
    - Approbation parentale requise
    - Validation administrative requise
    - Rapports quotidiens/hebdomadaires
    
    ### üîß **Gestion des templates**
    - Templates par type d'√©v√©nement et canal
    - Support multilingue (FR/EN)
    - Variables dynamiques
    - Pr√©visualisation et test
    
    ### üë§ **Pr√©f√©rences utilisateur**
    - Configuration par canal (email/SMS/push)
    - Heures de silence
    - Fr√©quence des notifications
    - Langue pr√©f√©r√©e
    
    ## üîó **Int√©gration PresencePro**
    
    Le service √©coute les √©v√©nements de :
    - **attendance-service** : D√©tection d'absences
    - **justification-service** : Workflow de justifications
    - **messaging-service** : Nouveaux messages
    - **auth-service** : Authentification et permissions
    - **user-service** : Informations utilisateurs
    
    ## üìä **Monitoring**
    
    - Health checks complets
    - M√©triques Prometheus
    - Logs structur√©s
    - Statistiques d'envoi
    - Queue monitoring
    
    ---
    
    **üé≠ PresencePro Notification Service** - Notifications intelligentes pour l'√©ducation
    """,
    version=settings.service_version,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware de logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Logger les requ√™tes HTTP"""
    start_time = datetime.now(timezone.utc)
    
    # Traiter la requ√™te
    response = await call_next(request)
    
    # Calculer le temps de traitement
    process_time = (datetime.now(timezone.utc) - start_time).total_seconds()
    
    # Logger la requ√™te
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    # Ajouter le temps de traitement dans les headers
    response.headers["X-Process-Time"] = str(process_time)
    
    return response


# Gestionnaire d'erreurs global
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Gestionnaire d'erreurs global"""
    logger.error(f"Erreur non g√©r√©e: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erreur interne du serveur",
            "error_type": type(exc).__name__,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    )


# Routes de base

@app.get("/")
async def root():
    """Page d'accueil du service"""
    return {
        "service": "notification-service",
        "version": settings.service_version,
        "status": "running",
        "description": "Service de notifications asynchrones pour PresencePro",
        "documentation": "/docs",
        "health": "/health",
        "celery_monitoring": "/celery",
        "timestamp": datetime.now(timezone.utc)
    }


@app.get("/health")
async def health_check():
    """V√©rification de sant√© du service"""
    try:
        # V√©rifier la base de donn√©es
        db_healthy = check_database_connection()
        
        # V√©rifier Redis
        redis_healthy = False
        try:
            await event_listener.connect()
            redis_healthy = True
        except:
            pass
        
        # V√©rifier Celery
        from app.core.celery_app import celery_app
        celery_healthy = False
        celery_workers = 0
        try:
            inspect = celery_app.control.inspect()
            stats = inspect.stats()
            if stats:
                celery_healthy = True
                celery_workers = len(stats)
        except:
            pass
        
        # Statistiques de base de donn√©es
        db_stats = get_database_stats()
        
        # Informations sur la queue
        queue_info = await event_listener.get_queue_info()
        
        # √âtat g√©n√©ral
        is_healthy = db_healthy and redis_healthy
        
        health_status = {
            "service": "notification-service",
            "status": "healthy" if is_healthy else "unhealthy",
            "timestamp": datetime.now(timezone.utc),
            "version": settings.service_version,
            "checks": {
                "database": {
                    "status": "healthy" if db_healthy else "unhealthy",
                    "details": db_stats
                },
                "redis": {
                    "status": "healthy" if redis_healthy else "unhealthy",
                    "details": queue_info
                },
                "celery": {
                    "status": "healthy" if celery_healthy else "unhealthy",
                    "workers": celery_workers
                },
                "event_listener": {
                    "status": "running" if event_listener.is_listening else "stopped"
                }
            }
        }
        
        return health_status
        
    except Exception as e:
        logger.error(f"Erreur v√©rification sant√©: {e}")
        return {
            "service": "notification-service",
            "status": "unhealthy",
            "timestamp": datetime.now(timezone.utc),
            "error": str(e)
        }


@app.get("/info")
async def service_info():
    """Informations d√©taill√©es sur le service"""
    try:
        # Statistiques de base de donn√©es
        db_stats = get_database_stats()
        
        # Informations Celery
        from app.core.celery_app import celery_app
        celery_info = {}
        try:
            inspect = celery_app.control.inspect()
            celery_info = {
                "active_tasks": inspect.active(),
                "scheduled_tasks": inspect.scheduled(),
                "reserved_tasks": inspect.reserved(),
                "stats": inspect.stats()
            }
        except:
            celery_info = {"error": "Celery non disponible"}
        
        # Configuration du service
        service_config = {
            "email_provider": "sendgrid" if settings.use_sendgrid else "smtp",
            "sms_enabled": settings.sms_enabled,
            "push_enabled": settings.push_notifications_enabled,
            "max_retry_attempts": settings.max_retry_attempts,
            "batch_size": settings.batch_size,
            "supported_languages": settings.supported_languages,
            "notification_types": list(settings.notification_types.keys()),
            "notification_channels": list(settings.notification_channels.keys())
        }
        
        info = {
            "service": {
                "name": settings.service_name,
                "version": settings.service_version,
                "port": settings.service_port,
                "debug": settings.debug
            },
            "database": {
                "type": "SQLite" if "sqlite" in settings.database_url else "PostgreSQL",
                "stats": db_stats
            },
            "celery": celery_info,
            "configuration": service_config,
            "features": {
                "email_notifications": True,
                "sms_notifications": settings.sms_enabled,
                "push_notifications": settings.push_notifications_enabled,
                "webhook_support": True,
                "template_system": True,
                "user_preferences": True,
                "retry_mechanism": True,
                "batch_processing": True,
                "event_listening": True
            },
            "timestamp": datetime.now(timezone.utc)
        }
        
        return info
        
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration info service: {e}")
        return {
            "service": settings.service_name,
            "version": settings.service_version,
            "error": str(e),
            "timestamp": datetime.now(timezone.utc)
        }


# Endpoint pour tester l'envoi d'√©v√©nements (d√©veloppement uniquement)
@app.post("/test/event")
async def test_event(event_data: dict):
    """Tester l'envoi d'un √©v√©nement (d√©veloppement uniquement)"""
    if not settings.debug:
        return {"error": "Endpoint disponible uniquement en mode debug"}
    
    try:
        await event_listener.publish_event(event_data)
        return {"success": True, "message": "√âv√©nement publi√© pour test"}
    except Exception as e:
        return {"success": False, "error": str(e)}


# Point d'entr√©e pour le d√©veloppement
if __name__ == "__main__":
    import uvicorn
    
    logger.info(f"üöÄ D√©marrage du serveur de d√©veloppement sur le port {settings.service_port}")
    
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.service_port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )
