version: '3.8'

services:
  # Service principal de statistiques
  statistics-service:
    build: .
    container_name: presencepro-statistics
    ports:
      - "8009:8009"
    environment:
      # Service
      SERVICE_NAME: statistics-service
      SERVICE_VERSION: 1.0.0
      SERVICE_PORT: 8009
      DEBUG: "false" # Set to False for production
      
      # Base de données
      DATABASE_URL: postgresql://postgres:presencepro_stats@postgres:5432/presencepro_statistics
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: presencepro_statistics
      DATABASE_USER: postgres
      DATABASE_PASSWORD: presencepro_stats
      
      # Redis
      REDIS_URL: redis://redis:6379/1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      CACHE_ENABLED: "true"
      CACHE_TTL: 3600
      
      # Services PresencePro
      AUTH_SERVICE_URL: http://host.docker.internal:8001
      USER_SERVICE_URL: http://host.docker.internal:8002
      COURSE_SERVICE_URL: http://host.docker.internal:8003
      ATTENDANCE_SERVICE_URL: http://host.docker.internal:8005
      JUSTIFICATION_SERVICE_URL: http://host.docker.internal:8006
      NOTIFICATION_SERVICE_URL: http://host.docker.internal:8008
      
      # Configuration
      DEFAULT_PERIOD_DAYS: 30
      MAX_PERIOD_DAYS: 365
      CHART_WIDTH: 1200
      CHART_HEIGHT: 800
      CHART_FORMAT: png
      EXPORT_DIR: ./exports
      
      # Performance
      MAX_CONCURRENT_REQUESTS: 100
      QUERY_TIMEOUT_SECONDS: 30
      BATCH_SIZE: 1000
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FILE: ./logs/statistics.log
    
    volumes:
      - ./exports:/app/exports
      - ./logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - presencepro-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: presencepro-statistics-db
    environment:
      POSTGRES_DB: presencepro_statistics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: presencepro_stats
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    ports:
      - "5433:5432"  # Port différent pour éviter les conflits
    
    networks:
      - presencepro-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d presencepro_statistics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: presencepro-statistics-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    ports:
      - "6380:6379"  # Port différent pour éviter les conflits
    
    networks:
      - presencepro-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Interface d'administration Redis (optionnel)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: presencepro-statistics-redis-ui
    environment:
      REDIS_HOSTS: local:redis:6379:1
      HTTP_USER: admin
      HTTP_PASSWORD: presencepro_redis
    
    ports:
      - "8082:8081"
    
    depends_on:
      - redis
    
    networks:
      - presencepro-network
    
    restart: unless-stopped
    
    profiles:
      - tools  # Démarrer seulement avec --profile tools

  # Interface d'administration PostgreSQL (optionnel)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: presencepro-statistics-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@presencepro.com
      PGADMIN_DEFAULT_PASSWORD: presencepro_admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    
    ports:
      - "8083:80"
    
    depends_on:
      - postgres
    
    networks:
      - presencepro-network
    
    restart: unless-stopped
    
    profiles:
      - tools  # Démarrer seulement avec --profile tools

# Volumes persistants
volumes:
  postgres_data:
    driver: local
    name: presencepro_statistics_postgres_data
  
  redis_data:
    driver: local
    name: presencepro_statistics_redis_data
  
  pgadmin_data:
    driver: local
    name: presencepro_statistics_pgadmin_data

# Réseau
networks:
  presencepro-network:
    driver: bridge
    name: presencepro-network
    external: true  # Utiliser le réseau PresencePro existant
