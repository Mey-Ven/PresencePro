"""
Application principale du service de statistiques PresencePro
"""
import logging
import sys
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from datetime import datetime, timezone
import os

from app.core.config import settings
from app.core.database import init_database, check_database_connection
from app.routes import statistics, health

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(settings.log_file) if settings.log_file else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage du Statistics Service...")
    
    try:
        # Cr√©er les r√©pertoires n√©cessaires
        os.makedirs("logs", exist_ok=True)
        os.makedirs("exports/json", exist_ok=True)
        os.makedirs("exports/charts", exist_ok=True)
        
        # Initialiser la base de donn√©es
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e")
        
        # TODO: Initialiser les donn√©es d'exemple si n√©cessaire
        if settings.mock_data_enabled:
            logger.info("üìä G√©n√©ration de donn√©es d'exemple...")
            # await generate_sample_data()
        
        logger.info("‚úÖ Statistics Service d√©marr√© avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage service: {e}")
        raise
    
    yield
    
    # Arr√™t
    logger.info("üõë Arr√™t du Statistics Service...")
    
    try:
        # Nettoyage si n√©cessaire
        logger.info("‚úÖ Service arr√™t√© proprement")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur arr√™t service: {e}")


# Cr√©er l'application FastAPI
app = FastAPI(
    title="PresencePro Statistics Service",
    description="""
    üé≠ **Service de statistiques et d'analyse pour PresencePro**
    
    Ce microservice g√©n√®re des statistiques avanc√©es et des rapports d'analyse pour tous les aspects de la gestion des pr√©sences dans l'√©cosyst√®me PresencePro.
    
    ## üöÄ **Fonctionnalit√©s principales**
    
    ### üìä **Statistiques individuelles**
    - Taux de pr√©sence par √©tudiant
    - √âvolution des absences dans le temps
    - Comparaison avec la moyenne de classe
    - Tendances et pr√©dictions
    - Classement et percentiles
    
    ### üè´ **Statistiques de classe**
    - Moyennes et m√©dianes de pr√©sence
    - Classement des √©tudiants
    - Comparaison entre cours
    - Identification des √©tudiants √† risque
    - Tendances hebdomadaires et mensuelles
    
    ### üåç **Statistiques globales**
    - Vue d'ensemble de l'√©tablissement
    - Comparaison entre classes
    - Tendances g√©n√©rales
    - Indicateurs de performance
    - Tableaux de bord ex√©cutifs
    
    ### üìà **G√©n√©ration de graphiques**
    - Graphiques en ligne pour les tendances
    - Graphiques en barres pour les comparaisons
    - Graphiques en secteurs pour les r√©partitions
    - Cartes de chaleur pour les patterns
    - Histogrammes et box plots pour les distributions
    
    ### üì§ **Export de donn√©es**
    - Export JSON pour int√©grations
    - Export CSV pour analyse externe
    - Export Excel avec formatage
    - Export PDF avec graphiques
    - Export d'images haute r√©solution
    
    ### ‚ö° **Performance et cache**
    - Cache Redis pour les calculs co√ªteux
    - Requ√™tes optimis√©es avec index
    - Calculs asynchrones en arri√®re-plan
    - Pagination pour les gros volumes
    - Rate limiting pour la protection
    
    ## üéØ **Types de statistiques**
    
    - **attendance_rate** : Taux de pr√©sence
    - **absence_count** : Nombre d'absences
    - **tardiness_count** : Nombre de retards
    - **justified_absences** : Absences justifi√©es
    - **unjustified_absences** : Absences non justifi√©es
    - **weekly_trends** : Tendances hebdomadaires
    - **monthly_trends** : Tendances mensuelles
    - **course_comparison** : Comparaison par cours
    - **student_ranking** : Classement des √©tudiants
    - **class_average** : Moyennes de classe
    
    ## üìä **Types de graphiques**
    
    - **line_chart** : Graphiques en ligne
    - **bar_chart** : Graphiques en barres
    - **pie_chart** : Graphiques en secteurs
    - **heatmap** : Cartes de chaleur
    - **histogram** : Histogrammes
    - **box_plot** : Bo√Ætes √† moustaches
    - **scatter_plot** : Nuages de points
    - **area_chart** : Graphiques en aires
    
    ## üîó **Int√©gration PresencePro**
    
    Le service s'int√®gre avec :
    - **attendance-service** : Donn√©es de pr√©sence
    - **user-service** : Informations utilisateurs
    - **course-service** : Donn√©es des cours
    - **justification-service** : Justifications d'absence
    - **auth-service** : Authentification et permissions
    
    ## üìà **Cas d'usage**
    
    ### **Pour les enseignants**
    - Suivi individuel des √©tudiants
    - Identification des √©tudiants en difficult√©
    - Rapports de classe personnalis√©s
    - Comparaison entre cours
    
    ### **Pour les administrateurs**
    - Tableaux de bord ex√©cutifs
    - Comparaison entre classes
    - Tendances de l'√©tablissement
    - Rapports de performance
    
    ### **Pour les parents**
    - Suivi de leur enfant
    - Comparaison avec la classe
    - √âvolution dans le temps
    - Alertes et notifications
    
    ### **Pour les √©tudiants**
    - Auto-√©valuation
    - Objectifs de pr√©sence
    - Comparaison anonyme
    - Motivation et gamification
    
    ---
    
    **üé≠ PresencePro Statistics Service** - Intelligence analytique pour l'√©ducation
    """,
    version=settings.service_version,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir les fichiers statiques (exports)
if os.path.exists(settings.export_dir):
    app.mount("/exports", StaticFiles(directory=settings.export_dir), name="exports")

# Middleware de logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Logger les requ√™tes HTTP"""
    start_time = datetime.now(timezone.utc)
    
    # Traiter la requ√™te
    response = await call_next(request)
    
    # Calculer le temps de traitement
    process_time = (datetime.now(timezone.utc) - start_time).total_seconds()
    
    # Logger la requ√™te
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    # Ajouter le temps de traitement dans les headers
    response.headers["X-Process-Time"] = str(process_time)
    
    return response


# Gestionnaire d'erreurs global
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Gestionnaire d'erreurs global"""
    logger.error(f"Erreur non g√©r√©e: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erreur interne du serveur",
            "error_type": type(exc).__name__,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    )


# Gestionnaire d'erreurs HTTP
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """Gestionnaire d'erreurs HTTP"""
    logger.warning(f"Erreur HTTP {exc.status_code}: {exc.detail}")
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "detail": exc.detail,
            "status_code": exc.status_code,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    )


# Inclure les routes
app.include_router(health.router)
app.include_router(statistics.router)


# Point d'entr√©e pour le d√©veloppement
if __name__ == "__main__":
    import uvicorn
    
    logger.info(f"üöÄ D√©marrage du serveur de d√©veloppement sur le port {settings.service_port}")
    
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.service_port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )
