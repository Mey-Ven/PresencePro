#!/usr/bin/env python3
"""
Script d'initialisation du Statistics Service
"""
import asyncio
import sys
import os
import logging
from datetime import date, datetime, timedelta
import argparse

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.core.config import settings
from app.core.database import init_database, get_database_stats, check_database_connection, check_redis_connection
from app.services.statistics_service import statistics_service
from app.services.integration_service import integration_service

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def initialize_database():
    """Initialiser la base de donn√©es"""
    logger.info("üîó Initialisation de la base de donn√©es...")
    
    try:
        init_database()
        logger.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation base de donn√©es: {e}")
        return False


async def create_sample_data():
    """Cr√©er des donn√©es d'exemple"""
    logger.info("üìä Cr√©ation de donn√©es d'exemple...")
    
    try:
        from app.core.database import SessionLocal
        from app.models.statistics import AttendanceRecord
        import random
        
        db = SessionLocal()
        
        # Supprimer les anciennes donn√©es d'exemple
        db.query(AttendanceRecord).filter(
            AttendanceRecord.student_id.like("sample_%")
        ).delete()
        
        # Cr√©er des donn√©es d'exemple pour plusieurs √©tudiants et classes
        sample_data = []
        
        # 3 classes avec 10 √©tudiants chacune
        for class_num in range(1, 4):
            class_id = f"sample_class_{class_num:02d}"
            
            for student_num in range(1, 11):
                student_id = f"sample_student_{class_num:02d}_{student_num:02d}"
                
                # 60 jours de donn√©es
                for day_offset in range(60):
                    record_date = date.today() - timedelta(days=day_offset)
                    
                    # Simuler diff√©rents cours dans la journ√©e
                    for course_num in range(1, 4):
                        course_id = f"sample_course_{course_num:02d}"
                        
                        # Probabilit√© de pr√©sence variable selon l'√©tudiant
                        base_attendance_rate = 0.7 + (student_num * 0.02)  # 70% √† 90%
                        
                        # Variation selon le jour de la semaine
                        weekday = record_date.weekday()
                        if weekday == 0:  # Lundi
                            attendance_rate = base_attendance_rate * 0.9
                        elif weekday == 4:  # Vendredi
                            attendance_rate = base_attendance_rate * 0.85
                        else:
                            attendance_rate = base_attendance_rate
                        
                        # D√©terminer le statut
                        rand = random.random()
                        if rand < attendance_rate:
                            status = "present"
                        elif rand < attendance_rate + 0.05:
                            status = "late"
                        else:
                            status = "absent"
                        
                        # Justification pour certaines absences
                        is_justified = status == "absent" and random.random() < 0.3
                        
                        record = AttendanceRecord(
                            student_id=student_id,
                            course_id=course_id,
                            class_id=class_id,
                            teacher_id=f"sample_teacher_{course_num:02d}",
                            date=record_date,
                            time_slot=f"{8 + course_num}:00-{9 + course_num}:00",
                            status=status,
                            detection_method=random.choice(["facial_recognition", "manual", "qr_code"]),
                            confidence_score=random.uniform(0.85, 0.99) if status == "present" else None,
                            is_justified=is_justified,
                            justification_id=f"just_{random.randint(1000, 9999)}" if is_justified else None
                        )
                        
                        sample_data.append(record)
        
        # Sauvegarder par lots
        batch_size = 1000
        total_records = len(sample_data)
        
        for i in range(0, total_records, batch_size):
            batch = sample_data[i:i + batch_size]
            db.add_all(batch)
            db.commit()
            logger.info(f"üìù Sauvegard√© {min(i + batch_size, total_records)}/{total_records} enregistrements")
        
        db.close()
        
        logger.info(f"‚úÖ {total_records} enregistrements d'exemple cr√©√©s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation donn√©es d'exemple: {e}")
        return False


async def test_statistics_calculation():
    """Tester le calcul de statistiques"""
    logger.info("üßÆ Test du calcul de statistiques...")
    
    try:
        # Test statistiques √©tudiant
        student_stats = await statistics_service.get_student_statistics(
            student_id="sample_student_01_01",
            start_date=date.today() - timedelta(days=30),
            end_date=date.today(),
            use_cache=False
        )
        
        logger.info(f"üìä Statistiques √©tudiant - Taux de pr√©sence: {student_stats.get('attendance_rate', 0)}%")
        
        # Test statistiques classe
        class_stats = await statistics_service.get_class_statistics(
            class_id="sample_class_01",
            start_date=date.today() - timedelta(days=30),
            end_date=date.today(),
            use_cache=False
        )
        
        logger.info(f"üè´ Statistiques classe - Moyenne: {class_stats.get('average_attendance_rate', 0)}%")
        
        # Test statistiques globales
        global_stats = await statistics_service.get_global_statistics(
            start_date=date.today() - timedelta(days=30),
            end_date=date.today(),
            use_cache=False
        )
        
        logger.info(f"üåç Statistiques globales - Taux global: {global_stats.get('global_attendance_rate', 0)}%")
        
        logger.info("‚úÖ Calculs de statistiques valid√©s")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test statistiques: {e}")
        return False


async def test_chart_generation():
    """Tester la g√©n√©ration de graphiques"""
    logger.info("üìà Test de g√©n√©ration de graphiques...")
    
    try:
        from app.services.chart_service import chart_service
        from app.models.statistics import ChartType, ExportFormat
        
        # Donn√©es d'exemple
        chart_data = {
            "x": ["Sem 1", "Sem 2", "Sem 3", "Sem 4"],
            "y": [85, 88, 90, 87],
            "name": "Taux de pr√©sence"
        }
        
        # G√©n√©rer un graphique en ligne
        chart_result = await chart_service.generate_chart(
            chart_type=ChartType.LINE_CHART,
            data=chart_data,
            title="Test - √âvolution du taux de pr√©sence",
            x_axis_label="Semaines",
            y_axis_label="Taux (%)",
            export_format=ExportFormat.PNG
        )
        
        if os.path.exists(chart_result["file_path"]):
            logger.info(f"‚úÖ Graphique g√©n√©r√©: {chart_result['file_path']}")
            return True
        else:
            logger.error("‚ùå Fichier graphique non cr√©√©")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration graphique: {e}")
        return False


async def sync_attendance_data():
    """Synchroniser les donn√©es de pr√©sence"""
    logger.info("üîÑ Synchronisation des donn√©es de pr√©sence...")
    
    try:
        result = await integration_service.sync_attendance_data(
            start_date=date.today() - timedelta(days=30),
            end_date=date.today()
        )
        
        if result["success"]:
            logger.info(f"‚úÖ {result.get('records_synced', 0)} enregistrements synchronis√©s")
        else:
            logger.warning(f"‚ö†Ô∏è Synchronisation √©chou√©e: {result.get('error', 'Erreur inconnue')}")
        
        return result["success"]
        
    except Exception as e:
        logger.error(f"‚ùå Erreur synchronisation: {e}")
        return False


async def check_service_health():
    """V√©rifier la sant√© du service"""
    logger.info("üè• V√©rification de la sant√© du service...")
    
    try:
        # Base de donn√©es
        db_connected = check_database_connection()
        logger.info(f"üîó Base de donn√©es: {'‚úÖ Connect√©e' if db_connected else '‚ùå D√©connect√©e'}")
        
        # Redis
        redis_connected = check_redis_connection()
        logger.info(f"üî¥ Redis: {'‚úÖ Connect√©' if redis_connected else '‚ö†Ô∏è Non disponible'}")
        
        # Statistiques de base de donn√©es
        db_stats = get_database_stats()
        logger.info(f"üìä Enregistrements de pr√©sence: {db_stats.get('total_attendance_records', 0)}")
        logger.info(f"üë• √âtudiants uniques: {db_stats.get('unique_students', 0)}")
        logger.info(f"üìö Cours uniques: {db_stats.get('unique_courses', 0)}")
        
        # Services externes
        services_health = await integration_service.check_services_health()
        logger.info("üîó Services externes:")
        for service, status in services_health.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            logger.info(f"  {status_icon} {service}")
        
        overall_health = db_connected
        logger.info(f"üéØ √âtat g√©n√©ral: {'‚úÖ Sain' if overall_health else '‚ùå Probl√®me'}")
        
        return overall_health
        
    except Exception as e:
        logger.error(f"‚ùå Erreur v√©rification sant√©: {e}")
        return False


async def show_service_info():
    """Afficher les informations du service"""
    logger.info("‚ÑπÔ∏è Informations du Statistics Service")
    logger.info("=" * 50)
    logger.info(f"üìõ Nom: {settings.service_name}")
    logger.info(f"üî¢ Version: {settings.service_version}")
    logger.info(f"üö™ Port: {settings.service_port}")
    logger.info(f"üêõ Debug: {settings.debug}")
    logger.info(f"üóÑÔ∏è Base de donn√©es: {settings.database_url.split('@')[-1] if '@' in settings.database_url else 'Local'}")
    logger.info(f"üî¥ Redis: {settings.redis_url}")
    logger.info(f"üìä Types de statistiques: {len(settings.available_stats)}")
    logger.info(f"üìà Types de graphiques: {len(settings.available_charts)}")
    logger.info(f"üì§ Formats d'export: {', '.join(settings.export_formats)}")
    logger.info("=" * 50)


async def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="Initialisation du Statistics Service")
    parser.add_argument("action", nargs="?", default="init", 
                       choices=["init", "sample-data", "test-stats", "test-charts", "sync", "health", "info"],
                       help="Action √† ex√©cuter")
    
    args = parser.parse_args()
    
    logger.info("üé≠ Statistics Service - Script d'initialisation")
    
    if args.action == "init":
        logger.info("üöÄ Initialisation compl√®te du service...")
        
        success = True
        success &= await initialize_database()
        success &= await create_sample_data()
        success &= await test_statistics_calculation()
        success &= await test_chart_generation()
        success &= await check_service_health()
        
        if success:
            logger.info("üéâ Service initialis√© avec succ√®s!")
            await show_service_info()
        else:
            logger.error("‚ùå √âchec de l'initialisation")
            return 1
    
    elif args.action == "sample-data":
        success = await create_sample_data()
        return 0 if success else 1
    
    elif args.action == "test-stats":
        success = await test_statistics_calculation()
        return 0 if success else 1
    
    elif args.action == "test-charts":
        success = await test_chart_generation()
        return 0 if success else 1
    
    elif args.action == "sync":
        success = await sync_attendance_data()
        return 0 if success else 1
    
    elif args.action == "health":
        success = await check_service_health()
        return 0 if success else 1
    
    elif args.action == "info":
        await show_service_info()
        return 0
    
    return 0


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
