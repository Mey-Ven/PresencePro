"""
Script de test simple pour valider le service de cours
"""
import asyncio
import httpx
import json


async def test_course_service():
    """Test simple du service de cours"""
    base_url = "http://localhost:8003"
    
    print("üß™ Test du service de cours PresencePro")
    print("=" * 50)
    
    async with httpx.AsyncClient() as client:
        try:
            # Test de sant√©
            print("1. Test de sant√© du service...")
            response = await client.get(f"{base_url}/health")
            if response.status_code == 200:
                print("‚úÖ Service en bonne sant√©")
                print(f"   R√©ponse: {response.json()}")
            else:
                print(f"‚ùå Probl√®me de sant√©: {response.status_code}")
                return
            
            # Test de l'endpoint racine
            print("\n2. Test de l'endpoint racine...")
            response = await client.get(f"{base_url}/")
            if response.status_code == 200:
                print("‚úÖ Endpoint racine accessible")
                print(f"   R√©ponse: {response.json()}")
            else:
                print(f"‚ùå Probl√®me avec l'endpoint racine: {response.status_code}")
            
            # Test de la documentation
            print("\n3. Test de la documentation...")
            response = await client.get(f"{base_url}/docs")
            if response.status_code == 200:
                print("‚úÖ Documentation accessible")
            else:
                print(f"‚ùå Probl√®me avec la documentation: {response.status_code}")
            
            # Test des endpoints prot√©g√©s (sans authentification)
            print("\n4. Test des endpoints prot√©g√©s (sans auth)...")
            
            endpoints_to_test = [
                "/courses/",
                "/schedules/weekly",
                "/assignments/"
            ]
            
            for endpoint in endpoints_to_test:
                response = await client.get(f"{base_url}{endpoint}")
                if response.status_code in [401, 403]:
                    print(f"‚úÖ {endpoint} correctement prot√©g√© (code: {response.status_code})")
                else:
                    print(f"‚ö†Ô∏è  {endpoint} r√©ponse inattendue: {response.status_code}")
            
            print("\nüéâ Tests termin√©s!")
            print("\nüìù Pour tester avec authentification:")
            print("   1. D√©marrez le service d'authentification (port 8001)")
            print("   2. Obtenez un token JWT via /login")
            print("   3. Utilisez le token dans les headers: Authorization: Bearer <token>")
            print("   4. Testez les endpoints via http://localhost:8003/docs")
            
        except httpx.ConnectError:
            print("‚ùå Impossible de se connecter au service")
            print("   Assurez-vous que le service est d√©marr√© sur le port 8003")
            print("   Commande: uvicorn app.main:app --reload --port 8003")
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {e}")


def test_data_models():
    """Test des mod√®les de donn√©es"""
    print("\nüìä Test des mod√®les de donn√©es")
    print("-" * 30)
    
    # Exemple de donn√©es de cours
    course_data = {
        "name": "Math√©matiques Avanc√©es",
        "code": "MATH001",
        "description": "Cours de math√©matiques niveau 6√®me",
        "subject": "Math√©matiques",
        "level": "6√®me",
        "credits": 3,
        "max_students": 25,
        "status": "active",
        "academic_year": "2023-2024",
        "semester": "Semestre 1"
    }
    
    # Exemple de donn√©es d'emploi du temps
    schedule_data = {
        "course_id": 1,
        "day_of_week": "monday",
        "start_time": "08:00:00",
        "end_time": "09:30:00",
        "room": "A101",
        "building": "B√¢timent A",
        "start_date": "2023-09-01",
        "end_date": "2024-01-31"
    }
    
    # Exemple de donn√©es d'attribution
    assignment_data = {
        "course_id": 1,
        "user_id": "teacher1",
        "assignment_type": "teacher",
        "is_primary": True,
        "valid_from": "2023-09-01",
        "valid_to": "2024-06-30"
    }
    
    print("‚úÖ Mod√®le Cours:")
    print(f"   {json.dumps(course_data, indent=2, ensure_ascii=False)}")
    
    print("\n‚úÖ Mod√®le Emploi du Temps:")
    print(f"   {json.dumps(schedule_data, indent=2, ensure_ascii=False)}")
    
    print("\n‚úÖ Mod√®le Attribution:")
    print(f"   {json.dumps(assignment_data, indent=2, ensure_ascii=False)}")


def test_integration_examples():
    """Exemples d'int√©gration avec d'autres services"""
    print("\nüîó Exemples d'int√©gration")
    print("-" * 30)
    
    print("‚úÖ Int√©gration avec le service d'authentification:")
    print("   - V√©rification des tokens JWT")
    print("   - Validation des permissions par r√¥le")
    print("   - URL: http://localhost:8001")
    
    print("\n‚úÖ Int√©gration avec le service utilisateur:")
    print("   - R√©cup√©ration des informations utilisateur")
    print("   - Validation de l'existence des utilisateurs")
    print("   - URL: http://localhost:8002")
    
    print("\n‚úÖ Flux d'utilisation typique:")
    print("   1. Authentification via auth-service")
    print("   2. Cr√©ation de cours (Admin)")
    print("   3. D√©finition des emplois du temps")
    print("   4. Attribution des enseignants et √©tudiants")
    print("   5. Consultation des plannings")


if __name__ == "__main__":
    print("üöÄ Script de test du service de cours PresencePro")
    print("=" * 60)
    
    # Test des mod√®les de donn√©es
    test_data_models()
    
    # Exemples d'int√©gration
    test_integration_examples()
    
    # Test du service (asynchrone)
    asyncio.run(test_course_service())
