"""
Application principale du service de messagerie PresencePro
"""
import logging
import sys
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import structlog
from datetime import datetime, timezone

from app.core.config import settings
from app.core.database import connect_to_mongo, close_mongo_connection
from app.routes import messages, health
from app.websockets import websocket_routes

# Configuration du logging
logging.basicConfig(
    level=getattr(logging, settings.log_level.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(settings.log_file) if settings.log_file else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    # D√©marrage
    logger.info("üöÄ D√©marrage du Messaging Service...")
    
    try:
        # Connexion √† MongoDB
        await connect_to_mongo()
        logger.info("‚úÖ Connexion MongoDB √©tablie")
        
        # TODO: Initialiser d'autres services si n√©cessaire
        
        logger.info("‚úÖ Messaging Service d√©marr√© avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage service: {e}")
        raise
    
    yield
    
    # Arr√™t
    logger.info("üõë Arr√™t du Messaging Service...")
    
    try:
        # Fermer la connexion MongoDB
        await close_mongo_connection()
        logger.info("‚úÖ Connexion MongoDB ferm√©e")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur arr√™t service: {e}")


# Cr√©er l'application FastAPI
app = FastAPI(
    title="PresencePro Messaging Service",
    description="""
    üé≠ **Service de messagerie en temps r√©el pour PresencePro**
    
    Ce microservice fournit une messagerie interne entre parents et administrateurs avec :
    
    ## üöÄ **Fonctionnalit√©s principales**
    
    ### üì± **Messagerie en temps r√©el**
    - Messages instantan√©s via WebSockets
    - Notifications de frappe en temps r√©el
    - Accus√©s de r√©ception et de lecture
    - Statuts de connexion des utilisateurs
    
    ### üí¨ **Gestion des conversations**
    - Conversations directes entre utilisateurs
    - Conversations de groupe (pour les enseignants/admins)
    - Historique complet des messages
    - Recherche dans les conversations
    
    ### üîê **S√©curit√© et authentification**
    - Authentification JWT int√©gr√©e
    - Permissions bas√©es sur les r√¥les
    - Validation des autorisations de messagerie
    - Chiffrement des communications WebSocket
    
    ### üìä **Fonctionnalit√©s avanc√©es**
    - Statistiques de messagerie
    - Mod√©ration des messages
    - Archivage des conversations
    - Notifications push (√† venir)
    
    ## üîó **Int√©gration PresencePro**
    
    Le service s'int√®gre parfaitement avec :
    - **auth-service** : Authentification et autorisation
    - **user-service** : Gestion des utilisateurs et relations
    - **attendance-service** : Notifications d'absence
    - **justification-service** : Communication sur les justifications
    
    ## üåê **Endpoints disponibles**
    
    ### REST API
    - `/api/v1/messages/*` : Gestion des messages
    - `/health` : V√©rification de sant√©
    - `/info` : Informations du service
    
    ### WebSocket
    - `/ws` : Connexion WebSocket principale
    - `/ws/conversation/{id}` : Connexion √† une conversation sp√©cifique
    
    ## üì± **Utilisation WebSocket**
    
    ```javascript
    // Connexion WebSocket
    const ws = new WebSocket('ws://localhost:8007/ws?token=YOUR_JWT_TOKEN');
    
    // Envoyer un message
    ws.send(JSON.stringify({
        type: 'message',
        conversation_id: 'conv_123',
        content: 'Bonjour !',
        message_type: 'text'
    }));
    ```
    
    ---
    
    **üé≠ PresencePro Messaging Service** - Communication en temps r√©el pour l'√©ducation
    """,
    version=settings.service_version,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# Middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware de s√©curit√©
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"]  # En production, sp√©cifier les h√¥tes autoris√©s
)


# Middleware de logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Logger les requ√™tes HTTP"""
    start_time = datetime.now(timezone.utc)
    
    # Traiter la requ√™te
    response = await call_next(request)
    
    # Calculer le temps de traitement
    process_time = (datetime.now(timezone.utc) - start_time).total_seconds()
    
    # Logger la requ√™te
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Time: {process_time:.3f}s"
    )
    
    # Ajouter le temps de traitement dans les headers
    response.headers["X-Process-Time"] = str(process_time)
    
    return response


# Gestionnaire d'erreurs global
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Gestionnaire d'erreurs global"""
    logger.error(f"Erreur non g√©r√©e: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erreur interne du serveur",
            "error_type": type(exc).__name__,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
    )


# Inclure les routes
app.include_router(health.router)
app.include_router(messages.router)
app.include_router(websocket_routes.router)


# Route racine
@app.get("/")
async def root():
    """Page d'accueil du service"""
    return {
        "service": "messaging-service",
        "version": settings.service_version,
        "status": "running",
        "description": "Service de messagerie en temps r√©el pour PresencePro",
        "documentation": "/docs",
        "websocket": "/ws",
        "health": "/health",
        "info": "/info",
        "timestamp": datetime.now(timezone.utc)
    }


# Point d'entr√©e pour le d√©veloppement
if __name__ == "__main__":
    import uvicorn
    
    logger.info(f"üöÄ D√©marrage du serveur de d√©veloppement sur le port {settings.service_port}")
    
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.service_port,
        reload=settings.debug,
        log_level=settings.log_level.lower()
    )
